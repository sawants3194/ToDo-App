name: Deploy MERN To-Do App

on:
  push:
    branches:
      - main  # Change if your branch is different

jobs:
  deploy-frontend:
    name: Deploy React Frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: client

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: Install Dependencies
        run: npm install

      - name: Build React App
        run: npm run build

      - name: Deploy to S3 (Manual)
        run: |
            aws s3 sync client/build s3://${{ secrets.AWS_S3_BUCKET }} --acl public-read --follow-symlinks --delete --region ${{ secrets.AWS_REGION }}
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          
      - name: Debug AWS S3 Sync
        run: |
          aws s3 ls s3://${{ secrets.AWS_S3_BUCKET }} --region ${{ secrets.AWS_REGION }} --debug
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.YOUR_DISTRIBUTION_ID }} --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-backend:
    name: Deploy Node.js Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: server

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: Install Dependencies
        run: npm install

      - name: Test SSH Connection
        run: |
         echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ secrets.EC2_HOST }} "echo Connected!"


      - name: Restart Server on EC2
        run: |
          ssh -i private_key.pem ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ec2-user/ToDo-App
          npm install
          pm2 restart all || pm2 start index.js --name "todo-api"
          EOF
